#!/usr/bin/python3

import csv, datetime, getopt, os, sys

def logo():
    print('''
##############################################################
##############################################################
#
# PYTHON 3
# BATCH ORGANIZATIONAL INFORMATION SCRIPT v0.1
#
# Created by: Andrew Sturm
# Created on: 2020-07-27
#
##############################################################
##############################################################

This script will go through the process of filling your Google Directory with your organizational contact information.

The CSV is generated by the command: 'gam print users allfields todrive'.

From there, File > Download > CSV and point this program to that path.
''')
# TODO: This is not the most efficient 'gam print' GAM command. Fix this.

def main(argv):
    # Variables
    choice = ""
    emails = []
    gam = "/root/bin/gam/gam"
    read = ""
    write = ""

    # Check for the correct arguments
    try:
        opts, args = getopt.getopt(argv,"dhi:rv",["doit","help","input","read","version"])
    except getopt.GetoptError:
        print("Invalid argument.\n\nUsage: orginfo.py -i file")
        exit()

    # Get opt cases
    try:
        for opt, arg in opts:
            if opt in ("--doit"):
                write = 1
            elif opt in ("-h","--help"):
                print("Usage: orginfo.py -i file")
                print("The CSV is generated by the command: 'gam print users allfields todrive'.")
                print("From there, File > Download > CSV and point this program to that path.")
                exit()

            elif opt in ("-i","--input"):
                    try:
                        with open(arg, newline='') as csvfile:
                            reader = csv.DictReader(csvfile)
                            header = reader.fieldnames

                            for row in reader:
# Mandatory Fields
                                building = row['Building']
                                email = row['Email']
                                org = row['Organization']
                                phone = row['Phone']
                                title = row['Title']

                                emails.append(email)
# Conditional Fields
# TODO: Add conditionals for certain conditional/optional cases, which will alter the GAM command at the end.
#                                if "Building" in header:
#                                    building = row['Building']

                                print("\nBuilding: "+building)
                                print("Email: "+email)
                                print("Organization: "+org)
                                print("Phone/Area: "+phone)
                                print("Title: "+title+"\n")

                                # TODO: Figure out the most efficient way to be able to alter the necessary GAM command based on the above conditionals.
                                cmd = (gam+" update user "+email+" organization name \""+org+"\" title \""+title+"\" primary phone type work value "+phone+" primary")
                                print(cmd)
                                try:
                                    if "--doit" in argv:
                                        os.system(cmd)
                                    else:
                                        print("\nPlease specify '--doit' if you wish to write to the organization contact information.")

                                    cmd = (gam+" update user "+email+" location area "+phone+" building \""+building+"\" endlocation")
                                    print(cmd)
                                    if "--doit" in argv:
                                        os.system(cmd)
                                    else:
                                        print("\nPlease specify '--doit' if you wish to write to the organization contact information.")
                                    print()

                                except KeyboardInterrupt:
                                    print("Keyboard interrupt signal detected.\nExiting...")
                                    exit()

                    except KeyboardInterrupt:
                        print("Keyboard interrupt signal detected.\nExiting...")
                        exit()

            elif opt in ("-r","--read"):
                read = TRUE

            elif opt in ("-v","--version"):
                logo()
                exit()

    except KeyboardInterrupt:
        print("Keyboard interrupt signal detected.\nExiting...")
        exit()

    except FileNotFoundError:
        print("File not found.")
        print("Usage: orginfo.py -i file")
        exit()

    except KeyError:
        print("Check your CSV file for validity and try again.\nCreate CSV from GAM with: 'gam print users allfields todrive'")
        exit()

    except IsADirectoryError:
        print("Check your -i path. Ensure it is pointing to a .csv and not a directory.")
        exit()

# Start the main loop
if __name__ == "__main__":
    if sys.argv[1:] != []:
        main(sys.argv[1:])
    else:
        print("Usage: orginfo.py -i file")
